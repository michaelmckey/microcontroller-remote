/*
 * MIT License
 *
 * Copyright (c) 2021 Michael McKey (michaelmckey123@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package tk.michaelmckey.microcontrollerremote.db.entity;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;
import tk.michaelmckey.microcontrollerremote.recyclerview.RecyclerElement;

/**
 * Stores the title, message and the time received for a given CodeEntity
 * @author Michael McKey
 * @version 1.0.0
 */
@Entity(tableName = "code_table")
public class CodeEntity implements RecyclerElement {
    /**
     * A unique autogenerated id
     * @see #getId()
     */
    @ColumnInfo(name = "id")
    @PrimaryKey(autoGenerate = true)
    public int id;

    /**
     * The title of the CodeEntity
     * @see #getTitle()
     */
    @NonNull
    @ColumnInfo(name = "title")
    private String mTitle;

    /**
     * The message associated with the CodeEntity.
     * This command is sent to the connected device when the associated button is pressed.
     * @see #getMessage()
     * @see #getContents()
     */
    @NonNull
    @ColumnInfo(name = "message")
    private String mMessage;

    /**
     * The creation time of the CodeEntity.
     * This is when the code was added by the user or when it was received from the hardware device
     * Cannot be changed once the CodeEntity has been created.
     * @see #mTime
     */
    @ColumnInfo(name = "time")
    private final long mTime;

    /**
     * Constructs the code
     * @param title the title(String) of the code
     * @param message the message(String) associated with the code
     * @param time the creation time(long) of the code
     */
    public CodeEntity(@NonNull String title, @NonNull String message, long time) {
        mMessage = message;
        mTitle = title;
        mTime = time;
    }

    /**
     * Returns the contents of this RecyclerElement(the message}).
     * Used by the RecyclerViewAdapter to sort its elements.
     * @return the contents(the message in this case)
     * @see #getMessage()
     * @see #mMessage
     */
    @NonNull
    public String getContents(){
        return mMessage;
    }

    /**
     * Returns the unique Id associated with this CodeEntity on creation
     * @return the Id
     * @see #id
     */
    public long getId(){
        return id;
    }

    /**
     * Returns the title of this CodeEntity/RecyclerElement.
     * Used by the RecyclerViewAdapter to sort its elements.
     * @return the title
     * @see #mTitle
     * @see #setTitle(String)
     */
    @NonNull
    public String getTitle(){
        return mTitle;
    }

    /**
     * Returns the message/command associated with this code.
     * @return the message
     * @see #mMessage
     */
    @NonNull
    public String getMessage(){
        return mMessage;
    }

    /**
     * Returns the time of creation of this CodeEntity.
     * Used by the RecyclerViewAdapter to sort its RecyclerViewElements.
     * The time is the number of milliseconds since the Epoch(January 1, 1970, 00:00:00 GMT)
     * @return the time of creation
     * @see #mTime
     */
    public long getTime(){
        return mTime;
    }

    /**
     * Sets the title associated with this code
     * @param title the new title
     * @see #mTitle
     * @see #getTitle()
     */
    public void setTitle(@NonNull String title){
        mTitle = title;
    }

    /**
     * Sets the message associated with this code
     * @param message the new message
     * @see #mMessage
     * @see #mTitle
     */
    public void setMessage(@NonNull String message){
        mMessage = message;
    }

    /**
     * Gets the string representation of the Code
     * @return the string which represents the Code
     */
    @NonNull
    @Override
    public String toString() {
        return "CodeEntity{" +
                "id=" + id +
                ", mTitle='" + mTitle + '\'' +
                ", mMessage='" + mMessage + '\'' +
                ", mTime=" + mTime +
                '}';
    }

    /**
     * Compares this Code to the given Code to see if their data is the same(excluding id's)
     * @param obj the Code to compare to this Code
     * @return true if they are the same
     */
    @Override
    public boolean equals(@Nullable Object obj) {
        if(obj instanceof CodeEntity){
            CodeEntity code = (CodeEntity) obj;
            return code.getTitle().equals(this.getTitle())
                    && code.getMessage().equals(this.getMessage())
                    && code.getTime() == this.getTime();
        }
        return false;
    }
}
